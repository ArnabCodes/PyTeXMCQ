Create a Python-based quiz paper generation system for a physics course with the following specifications:

1. Project Structure:
- Create a main directory called "Quiz 2"
- Create subdirectories: topics/, answers/, papers/
- Create a roll_numbers.txt file with sample roll numbers (BT24ECE001, BT24ECE002, BT24ECE003)
- Create a README.md with project documentation

2. LaTeX Preamble (preamble.tex):
- Use the exam document class
- Include necessary packages: graphicx, siunitx, color, amsmath, amssymb, xcolor, tabto
- Define custom commands for formatting:
  - \blanksquare and \fsquare for enrollment number boxes
  - \examheader command that includes:
    - Title with enrollment number boxes
    - Full marks (10) and time (1 hr)
    - Constants table with:
      - Electron's charge (e = 1.602 × 10^-19 C)
      - Electron's mass (m_e = 9.1 × 10^-31 kg)
      - Planck's constant (h = 6.6 × 10^-34 J s)
      - Boltzmann's constant (k = 1.38 × 10^-23 J/K)
- Configure exam class options:
  - \bracketedpoints
  - \pointsinrightmargin
  - \CorrectChoiceEmphasis{\color{red}\bfseries}

3. Question Topics:
Create sample questions in topics/ directory with the following structure:
- semiconductor_physics.tex (10 questions)
- device_physics.tex (10 questions)
- laser_optics.tex (1 question)
Each question should be in the format:
\begin{question}
Question text
\begin{oneparcheckboxes}
\choice Option 1
\choice Option 2
\correctchoice Correct Option
\choice Option 3
\end{oneparcheckboxes}
\end{question}

4. Python Scripts:

a) generate_papers.py:
- Create a QuestionPaperGenerator class with methods:
  - load_preamble()
  - load_questions()
  - get_seed(roll_number)
  - randomize_options(question, seed, is_answer_key)
  - generate_paper(roll_number, questions_per_topic)
  - compile_latex(tex_file)
- Main functionality:
  - Load questions from topics/
  - Generate unique papers for each roll number
  - Randomize question order and options
  - Generate both question papers and answer keys
  - Compile LaTeX files to PDF

b) merge_pdfs.py:
- Create a script to merge all generated PDFs into:
  - all_question_papers.pdf
  - all_answer_keys.pdf

5. Features:
- Each student gets a unique paper based on their roll number
- Questions are randomly selected from each topic
- Options are randomly shuffled
- Answer keys preserve correct choices
- Constants table included in each paper
- Proper LaTeX formatting and compilation

6. Dependencies:
- Python 3.x
- LaTeX distribution with exam class
- Required Python packages: os, random, subprocess, pathlib, re, hashlib, shutil

The system should be able to:
1. Generate unique question papers for each roll number
2. Create corresponding answer keys
3. Compile all documents to PDF
4. Merge all PDFs into two final documents

The output should be professional-looking PDFs with:
- Proper formatting
- Constants table
- Randomized questions and options
- Clear answer keys

7. Sample Questions:
Create sample questions for each topic:

a) Semiconductor Physics:
- Questions about intrinsic semiconductors
- Questions about doping and carrier concentration
- Questions about band theory
- Questions about conductivity and mobility

b) Device Physics:
- Questions about p-n junctions
- Questions about transistors
- Questions about diodes
- Questions about MOSFETs

c) Laser Optics:
- Questions about laser principles
- Questions about optical properties
- Questions about beam characteristics

8. Error Handling:
- Handle missing files gracefully
- Provide clear error messages
- Validate LaTeX compilation
- Check for directory permissions

9. Documentation:
- Create a comprehensive README.md
- Include usage instructions
- Document file formats
- Provide troubleshooting guide

10. Testing:
- Test with multiple roll numbers
- Verify randomization works correctly
- Check PDF generation
- Validate answer keys
- Test error conditions 